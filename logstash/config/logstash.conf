input {
  beats {
    port => 5044
    ssl => false
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601} "
      what => "previous"
      negate => true
    }
    add_field => {
      "input" => "beats_core-ls-1"
    }
  }
}

filter {
  if [shipper] == ""{
    if "hoover" in [tags] {
      mutate {
        add_field => { "shipper" => "hoover"}
      }
    } else {
      mutate {
        add_field => { "shipper" => "unknown"}
      }
    }
  }
  if [type] == "catalina" {
    multiline {
      pattern => "(^\s*|%{MONTH} %{MONTHDAY}, 20%{YEAR} %{HOUR}:?%{MINUTE}(?::?%{SECOND}) (?:AM|PM))|(^20%{YEAR}-%{MONTHNUM}-%{MONTHDAY} %{HOUR}:?%{MINUTE}(?::?%{SECOND}) %{ISO8601_TIMEZONE})"
      negate => true
      what => "previous"
    }
    if "_grokparsefailure" in [tags] {
      drop { }
    }
    grok {
      match => { "message" => "(?:%{DATESTAMP:timestamp})(?:\s*)(?:%{SYSLOG5424SD})(?:\s*)(?:%{LOGLEVEL:log_type})(?:\s*)%{GREEDYDATA:Message}" }
      match => { "message" => "(?:\s*)%{LOGLEVEL:log_type}(?:\s*)%{GREEDYDATA:Message}" }
      match => { "message" => "(?:\s*)(?:%{GREEDYDATA:cache})" }
    }
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss,SSS Z", "MMM dd, yyyy HH:mm:ss a", "yy-MM-dd HH:mm:ss,SSS" ]    
    }
  }
  if [type] == "log" {
    grok {
      match => [ "message", "(?m)%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:severity} %{GREEDYDATA:message}" ]
      overwrite => [ "message" ]
    }
    date {
      match => ["timestamp", "YYYY-MM-dd HH:mm:ss,SSS"]
      timezone => "UTC"
      target => "@timestamp"
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    sniffing => true
    manage_template => false
    index => "logstash-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][type]}"
  }
}

